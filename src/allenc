#!/usr/bin/perl
# Copyright 2018 Inria. This file is part of Allen.
#
# Allen is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Allen is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Allen.  If not, see <https://www.gnu.org/licenses/>.

#
# Compiler for the Allen DSL.
#

my $usage = "usage: allenc [options] file.aln
where:
* file.aln contains a program in the Allen DSL
* options are the following ones:
  -o outfile: Output the compiled Perl module in outfile";

# Allen syntax:

my $syntax =
'* the syntax of an Allen program is:
  Prog -> Lib Rules
  Lib -> Def*
  Def -> "def" id ("[" id+(",") "]")? ("(" id*(",") ")")?
         "=" Context
  Rules -> id ":" Context (";" Rules)?
  Context -> "let" id "=" Expr "in" Context | Expr
  Expr -> Prod "|" Expr | Prod
  Prod -> Comp "&" Prod | Comp
  Comp -> Expr1 (">=!"|"<="|">="|">!"|"<"|">") Int | Expr1
  Expr1 -> "~" Expr1 | "(" Expr ")" | str
        | id ("[" Int+(",") "]")? ("(" Expr*(",") ")")?
  Int -> id | int ("hr" | "min" | "sec")?
* comments in the program start with a # and span to the end of line';

# NB: removed str case from Int

use Getopt::Std;
our %opts = ();

getopts('o:', \%opts) or die "$usage\n";

die "$usage\n$syntax\n" if @ARGV == 0;
die "$usage\n" if @ARGV > 1;

my $infile = $ARGV[0];
die "$usage\n" if $infile !~ /[.]aln$/;

my $outfile;
if (defined($opts{'o'})) {
  $outfile = $opts{'o'};
} else {
  $outfile = $infile;
  $outfile =~ s/[.]aln$/.pm/;
}

open(IN, "<", $infile) or
  die "cannot open input file \"$infile\"\n";

open(OUT, ">", $outfile) or
  die "cannot open output file \"$outfile\"\n";

my $line = "";

# while (1) {
#   my ($typ, $tok) = &token(1);
#   last if $typ eq "eof";
#   print "$tok: $typ\n";
# }
# print "done\n";
# exit;

my %predef = ("during" => [0,2], "contains" => [0,2],
  "over" => [0,2], "overlaps" => [0,2], "overlapped" => [0,2],
  "starts" => [0,2], "started" => [0,2], "ends" => [0,2], "ended" => [0,2],
  "eq" => [0,2], "met" => [0,2], "meets" => [0,2],
  "before" => [0,2], "after" => [0,2], "between" => [0,2], "btwin" => [0,2], "btw" => [0,2],
  "holds" => [0,2], "occ" => [0,2], "ex" => [0,2],
  "delay" => [1,1], "cut" => [1,1], "recent" => [1,1],
  "step" => [1,0], "orig" => [0,0], "wave" => [4,0], "slot" => [4,0], "slot_dst" => [2,0],
  "up" => [0,1], "dn" => [0,1], "sw" => [0,1],
  "all" => [0], "any" => [0], "any_up" => [0], "any_dn" => [0], "any_sw" => [0],
  "first" => [0,2], "fill" => [0,2], "flat" => [0,2], "flat_right" => [0,2],
  );

my %def = (); # symbol table for def's (global scope)
my %var = (); # symbol table for variables (lexical scope)

my $l = &parse_lib();
#&print_ast($l);
#print "\n";
my $p = &parse_rules();
#&print_ast($p);
#print "\n";

print OUT "# User-defined operators\n\n";
for my $d (@$l) {
  gen_def($d);
}
print OUT "\n# User-defined contexts\n[\n";
for (my $i = 0; $i < $#$p; $i += 2) { # iterate over key/val pairs
  my $k = $p->[$i];
  print OUT "\"$k\",\n";
  my $r = $p->[$i + 1];
  gen_context($r);
  print OUT ",\n";
}
print OUT "]\n";
exit;

# ----------------- parsing ---------------------

sub parse_lib() {
  my @defs = ();
  my ($typ, $tok) = &token(0); # look ahead
  while ($typ eq "key" && $tok eq "def") {
    my $d = &parse_def();
    push @defs, $d;
    my $nm = $d->[1];
    die "duplicated def: $nm" if defined($def{$nm});
    my $npar = @{$d->[2]};
    my $narg = @{$d->[3]};
    $def{$nm} = [$npar, $narg]; # put name in def symbol table
    ($typ, $tok) = &token(0); # look ahead
  }
  return \@defs;
}

sub parse_def() {
  %var = (); # reset let symbol table
  my ($typ, $tok) = &token(1);
  die "def expected, found $tok at $line"
    if $typ ne "key" || $tok ne "def";
  my ($typ2, $tok2) = &token(1);
  die "id expected in def, found $tok2 at $line"
    if $typ2 ne "id";
  my @pars = ();
  my ($typ3, $tok3) = &token(0); # lookahead
  if ($typ3 eq "key" && $tok3 eq "[") {
    &token(1); # consume '['
    do {
      my ($typ4, $tok4) = &token(1);
      die "id expected in def, found $tok4 at $line"
        if $typ4 ne "id";
      push @pars, $tok4;
      die "duplicated variable $tok4" if defined($var{$tok4});
      $var{$tok4} = "par"; # register parameter
      ($typ3, $tok3) = &token(1);
    } while ($typ3 eq "key" && $tok3 eq ",");
    die "expected closing par, found: $tok3"
      if $typ3 ne "key" || $tok3 ne "]";
  }
  my @args = ();
  ($typ3, $tok3) = &token(0); # lookahead
  if ($typ3 eq "key" && $tok3 eq "(") {
    &token(1); # consume '('
    ($typ3, $tok3) = &token(0); # lookahead
    if ($typ3 eq "key" && $tok3 eq ")") {
      # empty args
      &token(1); # consume ')'
    } else { # parse pars
      do {
        my ($typ5, $tok5) = &token(1);
        die "id expected in def, found $tok5 at $line"
          if $typ5 ne "id";
        push @args, $tok5;
        die "duplicated variable $tok5" if defined($var{$tok5});
        $var{$tok5} = "arg"; # register argument
        ($typ3, $tok3) = &token(1);
      } while ($typ3 eq "key" && $tok3 eq ",");
      die "expected closing par, found: $tok3 at $line"
        if $typ3 ne "key" || $tok3 ne ")";
    }
  }
  my ($typ6, $tok6) = &token(1);
  die "= expected in def, found $tok6 at $line"
    if $typ6 ne "key" || $tok6 ne "=";
  my $e = &parse_context();
  return ["def", $tok2, \@pars, \@args, $e];
}


sub parse_rules() {
  my ($typ1, $tok1) = &token(1);
  die "context name expected"
    if $typ1 ne "id";
  my ($typ, $tok) = &token(1);
  die "':' expected"
    if $typ ne "key" || $tok ne ":";
  %var = (); # reset let symbol table
  my $e1 = &parse_context();
  my @contexts = ($tok1, $e1); # ordered hash (list of key/val pairs)
  my %contexts = ($tok1 => $e1); # hash for local use only
  ($typ, $tok) = &token(1);
  while ($typ eq "key" && $tok eq ";") {
    ($typ1, $tok1) = &token(1);
    die "context name expected"
      if $typ1 ne "id";
    ($typ, $tok) = &token(1);
    die "':' expected"
      if $typ ne "key" || $tok ne ":";
    die "duplicated context name: $tok1"
      if exists($contexts{$tok1}); # uses the local hash
    %var = (); # reset let symbol table
    $e1 = &parse_context();
    push @contexts, $tok1, $e1;
    $contexts{$tok1} = $e1;
    ($typ, $tok) = &token(1);
  }
  die "garbage at end of program: $tok at $line"
    if $typ ne "eof";
  return \@contexts;
}

sub parse_context() {
  my ($typ, $tok) = &token(0); # look ahead
  if ($typ eq "key" && $tok eq "let") {
    &token(1); # consume "let"
    my ($typ2, $tok2) = &token(1);
    die "id expected in let, found $tok2 at $line"
      if $typ2 ne "id";
    die "duplicated variable $tok2" if defined($var{$tok2});
    # don't register yet, recursive let is disallowed
    my ($typ3, $tok3) = &token(1);
    die "= expected in let, found $tok3 at $line"
      if $typ3 ne "key" || $tok3 ne "=";
    my $e1 = &parse_expr();
    $var{$tok2} = "let"; # register let variable now
    my ($typ4, $tok4) = &token(1);
    die "'in' expected in let, found $tok4 at $line"
      if $typ4 ne "key" || $tok4 ne "in";
    my $e2 = &parse_context();
    return ["let", $tok2, $e1, $e2];
  } else {
    return &parse_expr();
  }
}

# left-recursive
sub parse_expr() {
  my $e1 = &parse_prod();
  my ($typ, $tok) = &token(0); # look ahead
  if ($typ eq "key" && $tok =~ /^[|]$/) {
    &token(1); # consume binary operator
    my $e2 = &parse_expr();
    return ["or", $e1, $e2];
  } else {
    return $e1;
  }
}

sub parse_prod() {
  my $e1 = &parse_comp();
  my ($typ, $tok) = &token(0); # look ahead
  if ($typ eq "key" && $tok =~ /^[&]$/) {
    &token(1); # consume binary operator
    my $e2 = &parse_prod();
    return ["and", $e1, $e2];
  } else {
    return $e1;
  }
}

sub parse_comp() {
  my $e1 = &parse_expr1();
  my ($typ, $tok) = &token(0); # look ahead
  if ($typ eq "key" && $tok =~ /^(>=!|<=|>=|>!|<|>)$/) {
    &token(1); # consume binary operator
    my $e2 = &parse_int();
    return [$tok, $e1, $e2];
  } else {
    return $e1;
  }
}

sub parse_int() {
  my ($typ, $tok) = &token(1);
  if($typ eq "int") {
    my $i = $tok;
    my ($typ2, $tok2) = &token(0);
    if ($typ2 eq "key" && $tok2 =~ /^(day|hr|min|sec)$/) {
      &token(1); # consume binary operator
      $i *= 1000;
      if ($tok2 eq "min") { $i *= 60; }
      elsif ($tok2 eq "hr") { $i *= 60 * 60; }
      elsif ($tok2 eq "day") { $i *= 24 * 60 * 60; }
    }
    return $i;
  } elsif ($typ eq "id") {
    die "unbound parameter"
      if !defined($var{$tok}) || $var{$tok} ne "par";
    return $tok;
  # } elsif ($typ eq "str") {
  #   return "\"$tok\"";
  } else {
    die "expected int or id constant, found $tok at $line";
  }
}

# non left-recursive
sub parse_expr1() {
  my ($typ, $tok) = &token(1);
  die "empty expr" if !defined($typ) || $typ eq "eof";
  if ($typ eq "key") {
    if ($tok eq "~") {
      my $e = &parse_expr1();
      return ["not", $e];
    } elsif ($tok = "(") {
      my $e = &parse_expr();
      my ($typ2, $tok2) = &token(1);
      die "expected closing par, found: $tok2 at $line"
        if $typ2 ne "key" || $tok2 ne ")";
      return $e;
    } else {
      die "expr starts with invalid key: $key at $line";
    }
  } elsif ($typ eq "id") {
    my @pars = ();
    my ($typ2, $tok2) = &token(0); # lookahead
    if ($typ2 eq "key" && $tok2 eq "[") {
      &token(1); # consume '['
      do {
        my $e = &parse_int();
        push @pars, $e;
        ($typ2, $tok2) = &token(1);
      } while ($typ2 eq "key" && $tok2 eq ",");
      die "expected closing par, found: $tok2"
        if $typ2 ne "key" || $tok2 ne "]";
    }
    my $arglst = 0; # bool var: has arg list?
    my @args = ();
    ($typ2, $tok2) = &token(0); # lookahead
    if ($typ2 eq "key" && $tok2 eq "(") {
      &token(1); # consume '('
      $arglst = 1;
      ($typ2, $tok2) = &token(0); # lookahead
      if ($typ2 eq "key" && $tok2 eq ")") {
        # empty args
        &token(1); # consume ')'
      } else { # parse pars
        do {
          my $e = &parse_expr();
          push @args, $e;
          ($typ2, $tok2) = &token(1);
        } while ($typ2 eq "key" && $tok2 eq ",");
        die "expected closing par, found: $tok2"
          if $typ2 ne "key" || $tok2 ne ")";
      }
    }
    if ($#pars >= 0 || $arglst == 1) { # it's a call
      # TODO: allow forward references (delay check to code generation phase)
      my $op = $tok;
      if (!exists($predef{$op}) && !exists($def{$op})) {
        die "undefined macro $op";
      } else { # check nb of pars & args
        my $type = exists($predef{$op})? $predef{$op}: $def{$op};
        my $npars0 = $type->[0]; # expected
        my $nargs0 = $type->[1]; # expected
        my $npars = @pars; # provided
        my $nargs = @args; # provided
        if ($npars != $npars0 || defined($nargs0) && $nargs != $nargs0) {
          die "pars/args mismatch for $op\[$npars0\]($nargs0):\n" .
              "called: $op\[$npars\]($nargs)";
        }
      }
      return [$tok, \@pars, @args];
    } else { # it's a var ref
      # variables cannot use forward reference
      die "unbound variable $tok"
        if !defined($var{$tok}) || $var{$tok} !~ /^arg|let$/;
      return $tok;
    }
  } elsif ($typ eq "int") {
    die "unexpected int $tok at $line";
  } elsif ($typ eq "str") {
    return $tok;
  } else {
    die "strange token $tok:$typ";
  }
}

# returns, and optionally consumes the next token
sub token() {
  my ($consume) = @_;
  #print "called token($consume) on $line\n";
  while (1) {
    $line =~ s/^\s*//o; # whitespace
    $line =~ s/^#.*//o; # comments
    last if $line ne "";
    $line = <IN>;
    #print "read: $line";
    if (!defined($line)) {
      #print "line undef\n";
      return ("eof", undef);
    }
    chomp $line;
  }
  my $typ;
  my $tok;
  if ($line =~ /^(\d+)/) {
    ($typ, $tok) = ("int", $1);
  } elsif ($line =~ /^([][&|~(),;:=]|>=!|<=|>=|>!|<|>|(day|hr|min|sec|let|in|def)\b)/) {
    ($typ, $tok) = ("key", $1);
  } elsif ($line =~ /^([a-zA-Z]\w*)/) {
    ($typ, $tok) = ("id", $1);
  } elsif ($line =~ /^("[^"]*")/) {
    ($typ, $tok) = ("str", $1);
  } else {
    die "unknown token at: $line\n";
  }
  if ($consume) {
    $line = substr($line, length($tok));
  }
  #print "token($consume): return ($typ, $tok); remains: $line\n";
  return ($typ, $tok);
}

sub print_ast() {
  my ($t) = @_;
  #print "called print_ast($t)\n";
  if (ref $t eq "ARRAY") {
    print OUT "[";
    for(my $i = 0; $i <= $#$t; $i++) {
      &print_ast($t->[$i]);
      if ($i < $#$t) {
        print OUT ", ";
      }
    }
    print OUT "]";
  } elsif (ref $t eq "") { # scalar
    if ($t =~ /^\d+$/) {
      print OUT "$t";
    } else {
      print OUT "\"$t\"";
    }
  }
}

# ----------------- generation ---------------------

sub gen_expr() {
  my ($t) = @_;
  #print "called print_ast($t)\n";
  if (ref $t eq "ARRAY") {
    die "gen_context([])" if $#$t < 0;
    my $op = $t->[0];
    if ($op =~ /^(>=!|<=|>=|>!|<|>|and|or|not)$/) {
      print OUT "[&";
      if ($op =~ /^(>=!|<=|>=|>!|<|>)$/) {
        print OUT
          $op eq "<="? "le":
          $op eq ">="? "ge":
          $op eq ">=!"? "geRT":
          $op eq "<"? "lt":
          $op eq ">"? "gt":
          $op eq ">!"? "gtRT":
          die "unknown comparator $op";
        print OUT "(";
        &gen_expr($t->[2]);
        print OUT "), ";
        &gen_expr($t->[1]);
      } else {
        print OUT $op;
        for (my $i = 1; $i <= $#$t; $i++) {
          print OUT ", ";
          &gen_expr($t->[$i]);
        }
      }
      print OUT "]";
    } else { # named op call
      my $pars = $t->[1];
      my @args = (@$t[2..$#$t]);
      # native macros first:
      if ($op eq "delay") { # unary op
        print OUT "[&$op(";
        &gen_expr($pars->[0]);
        print OUT "),";
        &gen_expr($args[0]);
        print OUT "]";
      } elsif ($op eq "wave") { # nullary op
        print OUT "[&$op(";
        &gen_expr($pars->[0]);
        print OUT ",";
        &gen_expr($pars->[1]);
        print OUT ",";
        &gen_expr($pars->[2]);
        print OUT ",";
        &gen_expr($pars->[3]);
        print OUT ")]";
      } else { # user-defined macros:
        print OUT "&$op(";
        my @lst = (@args, @$pars);
        my $first = 1;
        for my $x (@args, @$pars) {
          print OUT "," unless $first;
          $first = 0;
          &gen_expr($x);
        }
        print OUT ")";
      }
    }
  } elsif (ref $t eq "") { # scalar
    if ($t =~ /^\d+$/) {
      print OUT "$t";
    } elsif ($t =~ /^"/) {
      print OUT "$t";
    } else {
      print OUT "\$$t";
    }
  }
}

sub gen_context() {
  my ($t) = @_;
  my ($var, $val, $body) = &match_let($t);
  if (defined($var)) {
    print OUT "sub{";
    &gen_let($t);
    print OUT "}->()";
  } else {
    &gen_expr($t);
  }
}

sub match_let() {
  my ($t) = @_;
  if (ref $t eq "ARRAY" && $#$t >=1 && $t->[0] eq "let") {
    die "invalid let" if $#$t != 3;
    my (undef, $var, $val, $body) = @$t;
    return ($var, $val, $body);
  } else {
    return undef;
  }
}

sub gen_let() {
  my ($t) = @_;
  my ($var, $val, $body) = &match_let($t);
  if (defined($var)) {
    print OUT "my \$$var=";
    &gen_expr($val);
    print OUT "; ";
    &gen_let($body);
  } else {
    &gen_expr($t);
  }
}

sub gen_def() {
  my ($def) = @_;
  die "invalid def"
    if ref $def ne "ARRAY" || $#$def != 4;
  my (undef, $nm, $pars, $args, $body) = @$def;
  print OUT "sub $nm() {\n";
  print OUT "  my (";
  my @vars = (@$args, @$pars);
  for (my $i = 0; $i <= $#vars; $i++) {
    print OUT "\$$vars[$i]";
    print OUT "," if $i < $#vars;
  }
  print OUT ") = \@_;\n";
  # print OUT "  return ";
  # &gen_context($body);
  print OUT "  ";
  &gen_let($body);
  print OUT ";\n";
  print OUT "}\n";
}
